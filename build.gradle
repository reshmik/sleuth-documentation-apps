buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
        maven {
            url "http://repo.spring.io/libs-release-local"
        }
        maven {
            url "http://repo.spring.io/libs-staging-local/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"

    }
}

allprojects {
    apply plugin: 'java'
}

configure(subprojects) {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"

    ext {
        systemPropsFromGradle = {
            project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
        }
        buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "1.0.0.SLEUTH_DOCS"
    }

    group = 'io.spring.cloud.sleuth.docs'
    version = buildNrLoc

    sourceCompatibility = '1.8'

    configurations {
        all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    // To prevent an accidental usage of groovy-all.jar and groovy.jar in different versions
                    // all modularized Groovy jars are replaced with groovy-all.jar by default.
                    if (details.requested.group == 'org.codehaus.groovy' && details.requested.name != "groovy-all") {
                        details.useTarget("org.codehaus.groovy:groovy-all:${details.requested.version}")
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
        maven {
            url "http://repo.spring.io/libs-release-local"
        }
        maven {
            url "http://repo.spring.io/libs-staging-local/"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.findProperty('BOM_VERSION') ?: "Edgware.RELEASE"}"
        }
    }

    wrapper {
        gradleVersion '4.3.1'
    }

    bootRun {
        jvmArgs = systemPropsFromGradle()
    }

    test {
        jvmArgs systemPropsFromGradle()
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

}

configure(subprojects) {
    task allDeps(type: DependencyReportTask) {}
}

configure(subprojects - project(':acceptance-tests')) {

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.cloud:spring-cloud-starter-zipkin"
        compile "org.springframework.amqp:spring-rabbit"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.aspectj:aspectjrt"
        // for JSON logging
        runtime('net.logstash.logback:logstash-logback-encoder:4.6') {
            exclude group: "ch.qos.logback", module: "logback-core"
        }

        runtime 'org.aspectj:aspectjweaver'
    }

}

configure(project(":acceptance-tests")) {
    apply plugin: 'groovy'

    bootRepackage {
        enabled = false
    }

    bootRun {
        enabled = false
    }

    dependencies {
        compile "org.aspectj:aspectjrt:1.8.8"
        compile "org.springframework.boot:spring-boot-starter-web"
        compile 'org.codehaus.groovy:groovy-all'

        testCompile 'org.awaitility:awaitility:2.0.0'
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework:spring-web"
        testCompile "org.springframework.boot:spring-boot-starter-web"
        testCompile "org.springframework.cloud:spring-cloud-starter-sleuth"
        testCompile "io.zipkin.java:zipkin:1.0.0"
        testCompile( 'com.athaydes:spock-reports:1.2.13' ) {
            transitive = false // this avoids affecting your version of Groovy/Spock
        }
        testCompile "org.spockframework:spock-spring"
    }

    test {
        exclude '**/*.*'
    }

    task acceptanceTests(type: Test) {
        jvmArgs systemPropsFromGradle()
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
        include '**/*.*'

        group = "Verification"
        description = "Runs the acceptance tests"
    }

}
